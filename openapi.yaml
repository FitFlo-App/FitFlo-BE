openapi: 3.0.0
info:
  title: FitFlo Core API
  description: API for FitFlo AI Health Path Optimizer
  version: 1.0.0
servers:
  - url: https://api.fitflo.site
paths:
  /user/auth/email/verify:
    post:
      tags:
        - user/auth/email
      summary: Verify email registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        "200":
          description: Email sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    exampe: success
                  message:
                    type: string
                    example: Email sent. Please check yout inbox
                  data:
                    type: object
                    properties:
                      verificationCheck:
                        type: string
                        format: URL
                        example: https://api.fitflo.site/user/auth/email/activation?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImRldkBmaXRmbG8uc2l0ZSIsImlzVmVyaWZpZWQiOmZhbHNlLCJpYXQiOjE3NDE5MTY3MzEsImV4cCI6MTc0MTkzMTEzMX0.0pilDYxCLIuFT1JG9wZ2TGFzgUIhwTMbDOQ6YzUknJs
        "400":
          description: Email already registered
  /user/auth/email/activation:
    get:
      tags:
        - user/auth/email
      summary: Check email verification status
      parameters:
        - name: token
          in: query
          required: true
          description: JWT token obtained from /verify request
          schema:
            type: string
      responses:
        "200":
          description: User is verified
        "400":
          description: User still not verified
  /user/auth/email/register:
    post:
      tags:
        - user/auth/email
      summary: Register a verified email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: User is registered
        "400":
          description: Email is not yet verified
  /user/auth/email/login:
    post:
      tags:
        - user/auth/email
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Unauthorized, invalid credentials
  /user/auth/email/forgot-password:
    post:
      tags:
        - user/auth/email
      summary: Reset forgotten password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        "200":
          description: Email sent. Please check yout inbox
        "401":
          description: Email not found
  /user/auth/email/change-password:
    put:
      tags:
        - user/auth/email
      summary: Change forgotten password after the email verified
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: "newpass"
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImRldkBmaXRmbG8uc2l0ZSIsImF1dGgiOiJlbWFpbCIsImlhdCI6MTc0MTkxNjc3NiwiZXhwIjoxNzQxOTMxMTc2fQ.kvBAlh25YCECL1X4qn5ye2U8jMRhl_alOAd98rz22JY"
      responses:
        "200":
          description: Email sent. Please check yout inbox
        "401":
          description: Email not found
  /user/auth/refresh-token:
    get:
      tags:
        - user/auth
      summary: Refresh authentication token
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
        "401":
          description: Unauthorized, invalid or expired token
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
